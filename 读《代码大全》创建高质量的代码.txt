读代码大全<创建高质量的代码>

软件构建中的设计：
	1-最小复杂度的设计：容易理解的设计；
	2-易于维护的代码；
	3-松散耦合的设计；
	4-可重用性；
	5-可扩展性强；
	6-高扇入：高层的类利用了较低层次的工具类，即一个工具类给很多高层的类使用；
	7-低扇出：一个类少量或者适中使用其他的类；
	8-可移植性；
	9-精简性；
	10-层次性；
	11-标准技术；
封装实现：
	1-良好的类接口就像冰山的露出一样，类的大部分的内容是不会暴露出来的；
	2-当能继承简化就设计继承；

抽象通过提供一个可以让你忽略细节模型管理，而封装则阻止你看到细节；

抽象数据（ADT）：
	优点:
		1-可以隐藏实现细节:如果数据类型改变，只需要修改一个地方就可以，而不用影响到整个程序代码；
		2-改动不会影响到整个程序；
		3-让接口能提供更多的信息；
		4-更容易提高性能；
		5-程序更具说明性；
		6-不需要在程序内到处传递数据；
		7-可以向现实世界中那样操作实体，而不用在底层实现上操作它；

良好的接口:
	1-好的抽象；
	2-类的接口应该展示一致的抽象层次；
	3-一定要理解类所实现的抽象是什么；
	4-提供成对的服务；
	5-把不相关的信息转移到其他的类中；
	6-尽可能让接口可编程，而不是表达语义；
	7-在修改时破坏接口的抽象；
	8-不要添加与接口不一致的公用成员；
	9-同时考虑抽象和内聚性；

良好的封装：
	1-尽可能地限制类和成员可访问性；
	2-不要公开的暴露成员数据；
	3-避免把私用的实现细节放入类的接口中；
	4-不要对类的使用者做出任何的假设；
	5-避免使用友元类；
	6-不要因为一个程序仅使用公用的子程序，就把它归类公共接口；
	7-让阅读代码比编写更方便；
	8-要格外警惕从语义上破坏封装性；不要依赖类的私有实现，而是依赖类的公共接口；

有关设计和实现的问题：
	包含关系：有一个(has a ---)
	1-警惕超过7个数据成员的的类；
	2-避免使用private继承has a 的关系；
	
	继承： (是一个 ---)
	1-用public 来继承；
	2-要么用继承并详细说明它，要么就不用用它；
	3-不要“覆盖”一个不可以覆盖的成员函数：不要在派生类中使用基类成员函数；
	4-把公共接口、数据放到继承树尽可能高的位置；
	5-避免继承关系过深；
	6-尽量使用多态，避免大量的类型检查；

成员函数和数据成员：
	1-让类中的程序的数量尽可能少；
	2-禁止隐式的产生和你不需要成员函数和运算符；
	3-减少类所调用的不同子程序数量；
	4-对其他类的子程序间接调用尽可能少；

构造函数：
	1-如果可能，应该在所有的构造函数中初始化所有数据成员；
	2-用private构造函数来实现singleton property;
	3-优先采用深拷贝；
创造类的的原因：
	1-为现实中的对象建模；
	2-为抽象建模；
	3-降低复杂度；
	4-隔离复杂度：只需要修改本类就可以
	5-隐藏实现的细节；
	6-隐藏全局数据；
	7-建立中心控制点；
	8-让代码更易于重用；
	9-把相关的操作包装到一起；

避免的类：
	1-万能的类；
	2-消除无关紧要的类；
	3-避免使用动词；

高质量的子程序：
	1-命名需要自说明；
	2-要有简要的文档；
	3-代码风格；
	4-全局变量的读写应该通过子程序；
	5-子程序应该是功能单一的；
	6-错误防范：比如除数不能为零等判断；
	7-magic number 问题；
	8-使用& 就表示子函数会对其的值修改；
	9-传入参数不能太多，超过7个；

创建子程序的理由：
	1-降低复杂度；
	2-引入中间、易懂的抽象；
	3-避免代码重复；
	4-支持子类；
	5-隐藏顺序；
	6-隐藏指针的操作；
	7-提高可移植性；
	8-简化bool判断；
	9-更容易优化性能，找出瓶颈；
	10-确保所有的子程序都很小；

子程序设计：
	1-功能的内聚性:一个子程序只执行一项操作；
		顺序内聚；
		通讯上内聚；
		临时内聚；
		过程内聚
		逻辑上的内聚；
		巧合内聚；

好的子程序名字：
	1-描述子程序说做的事情；
	2-避免使用无意义、模糊或者表述不清的动词；
	3-不用通过数字来命名；
	4-给过程起名字是强烈的动词加宾语；

防御式编程：
	1-检查所有来源于外部的数据值；
	2-检查子程序所有的输入参数值；
	3-决定如何处理错误输入数据；

使用断言：
	1-用错误码来处理预期会发生的状态，用断言来处理绝不应该发生的状态；
	2-避免把执行的代码放到断言；
	3-用断言来注解并验证前条件和后条件；
	4-对于高健壮性的代码，应该先使用断言在处理错误；

异常：
	1-用异常通知程序的其他部分，发生不可忽略的错误；
	2-只在真正的例外情况下抛出异常；
	3-不能用异常来推卸责任；
	4-避免在构造函数和析构函数中抛出异常；
	5-在恰当的抽象层次抛出异常；

辅助调试代码：
	1-尽早引入辅助调试的代码
	2-采用进攻式的编程：
		遇到严重错误的时候应该终止运行；
		在删除一个对象时，填写垃圾数据；
		确保每一个case default 都能产生严重的错误；
	3-计划移除调试辅助代码；
		使用ant make 版本控制程序；
		使用内置的预处理器
			#define DEBUG

			#if defined DEBUG
				// CODING
			#endif 

伪代码的编写：(pseudocode programming process)
	1-
	



