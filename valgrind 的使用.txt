valgrind 的使用：

TOOL SELECTION OPTIONS
       The single most important option.

       --tool=<toolname> [default: memcheck]
           Run the Valgrind tool called toolname, e.g. memcheck, cachegrind, callgrind, helgrind,
           drd, massif, lackey, none, exp-sgcheck, exp-bbv, exp-dhat, etc.

	 --trace-children=<yes|no> [default: no]
           When enabled, Valgrind will trace into sub-processes initiated via the exec system call.
           This is necessary for multi-process programs.

           Note that Valgrind does trace into the child of a fork (it would be difficult not to,
           since fork makes an identical copy of a process), so this option is arguably badly named.
           However, most children of fork calls immediately call exec anyway.

       --trace-children-skip=patt1,patt2,...
           This option only has an effect when --trace-children=yes is specified. It allows for some
           children to be skipped. The option takes a comma separated list of patterns for the names
           of child executables that Valgrind should not trace into. Patterns may include the
           metacharacters ?  and *, which have the usual meaning.

           This can be useful for pruning uninteresting branches from a tree of processes being run
           on Valgrind. But you should be careful when using it. When Valgrind skips tracing into an
           executable, it doesn't just skip tracing that executable, it also skips tracing any of
           that executable's child processes. In other words, the flag doesn't merely cause tracing
           to stop at the specified executables -- it skips tracing of entire process subtrees rooted
           at any of the specified executables.



valgrind --leak-check=full  ./test

测试结果：
pwd006@Debain:~/test/train$ valgrind --leak-check=full  ./test
==29621== Memcheck, a memory error detector
==29621== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==29621== Using Valgrind-3.10.0 and LibVEX; rerun with -h for copyright info
==29621== Command: ./test
==29621== 
waten 
==29621== 
==29621== HEAP SUMMARY:
==29621==     in use at exit: 2 bytes in 1 blocks
==29621==   total heap usage: 1 allocs, 0 frees, 2 bytes allocated
==29621== 
==29621== 2 bytes in 1 blocks are definitely lost in loss record 1 of 1
==29621==    at 0x4C28C20: malloc (vg_replace_malloc.c:296)
==29621==    by 0x400557: main (in /home/pwd006/test/train/test)
==29621== 
==29621== LEAK SUMMARY:
==29621==    definitely lost: 2 bytes in 1 blocks
==29621==    indirectly lost: 0 bytes in 0 blocks
==29621==      possibly lost: 0 bytes in 0 blocks
==29621==    still reachable: 0 bytes in 0 blocks
==29621==         suppressed: 0 bytes in 0 blocks
==29621== 
==29621== For counts of detected and suppressed errors, rerun with: -v
==29621== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
