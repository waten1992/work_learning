epoll 总结：

#include <sys/epoll.h>

创建句柄：
epoll_create()

注册事件：
epoll_ctl()

监听注册的事件
epoll_wait()

2种模式：
	epoll ET(edge-triggered) 和 LT(level-triggered)
	ET使用的场景：
		i- 使用nonblocking fd
		ii-在read() write() 后面等待事件 return EAGAIN
	LT使用的场景：
		与ET用的场景相反；


int epoll_wait(int epfd, struct epoll_event *events,
                      int maxevents, int timeout);

The epoll_wait() system call waits for events on the epoll(7)
       instance referred to by the file descriptor epfd.  The memory area
       pointed to by events will contain the events that will be available
       for the caller.  Up to maxevents are returned by epoll_wait().  The
       maxevents argument must be greater than zero.

       The timeout argument specifies the number of milliseconds that
       epoll_wait() will block.  The call will block until either:

       *  a file descriptor delivers an event;

       *  the call is interrupted by a signal handler; or

       *  the timeout expires.

       Note that the timeout interval will be rounded up to the system clock
       granularity, and kernel scheduling delays mean that the blocking
       interval may overrun by a small amount.  Specifying a timeout of -1
       causes epoll_wait() to block indefinitely, while specifying a timeout
       equal to zero cause epoll_wait() to return immediately, even if no
       events are available.


The struct epoll_event is defined as:

           typedef union epoll_data {
               void    *ptr;
               int      fd;
               uint32_t u32;
               uint64_t u64;
           } epoll_data_t;

           struct epoll_event {
               uint32_t     events;    /* Epoll events */
               epoll_data_t data;      /* User data variable */
           };

The data of each returned structure will contain the same data the
user set with an epoll_ctl(2) (EPOLL_CTL_ADD, EPOLL_CTL_MOD) while
the events member will contain the returned event bit field.
	