总结：
    前2周是以项目为主，学习redis 的基本数据结构和API为编写存入redis的list做准备。
    后2周以学习为主，对锁的性能测试、nginx、socket网络编程为主；

项目：
	1-接受行情数据按照json格式序列化，同时使用hiredis 客户端存到RSS 的redis 队列中；
	2-帮忙数据组安装unixodbc连接SQL Server 和KDB，KDB没有连上unixodbc鑫鑫帮忙解决；

学习：
	1-gcc build in 、pthread 、二元信号量、自旋锁的性能测试；
	2-nginx的基本数据结构，和事件驱动的设计；
	3-cunit 单元测试框架 ；
	4-socket网络编程O_NONBLOCKING API 学习；
	5-进程的调度策略；
	6-阻塞IO、I/O复用、信号驱动、异步I/O模型；

遇到的问题：
	1-项目需求不明确，导致研究方向的错误；
	    在做行情推送程序时：
		开始以为是为了提高推送程序性能只需要纯转发就可以，就研究如何把结构体存入redis 的list；
		到后来需要在在推送程序把结构体解析json格式序列化存入redis的list；
                导致多花费了一些时间研究用不上的功能；

	2-在工作中遇到不能打开动态链接库的问题，比如：libmfast.so: cannot open shared object file；
		可以通过：
				方案1-export LD_LIBRARY_PATH="/your_so_file_path"多个路径可以用'：'分开;
				方案2-用root 在/etc/ld.so.conf/ 建立自己的xx.conf
		       		在里面写上你的so绝对路径; 
		       		然后在运行ldconfig
    
    3-在用gcc创建动态库时，发现主程序链接不上动态库。
        结果发现：主程序是用g++ 编译的，而动态库的是用gcc 编译的;
        原因： 不同的编译器的构造链接符号规则不一样，导致主程序的链接器在解析符号表找不到相应的.so；
        解决方案： 都用相同的编译器编译，即x.so 也用g++编译；